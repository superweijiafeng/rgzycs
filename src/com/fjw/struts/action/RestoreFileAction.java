/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.fjw.struts.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Random;
import java.util.UUID;
import java.util.zip.ZipException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.fjw.struts.form.RestoreFileForm;
import com.fjw.util.UnzipUtils;

/** 
 * MyEclipse Struts
 * Creation date: 04-16-2016
 * 
 * XDoclet definition:
 * @struts.action path="/restoreFile" name="restoreFileForm" scope="request"
 */
public class RestoreFileAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(request.getSession().getAttribute("user")==null) {
			return mapping.findForward("goHome");
		}
		RestoreFileForm restoreFileForm = (RestoreFileForm) form;
		if(restoreFileForm.getFile().getFileName().length()==0) {
			try {
				response.getWriter().println("请先选择文件");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}
		PrintWriter out=null;
		InputStream is=null;
		OutputStream os=null;
		String tmpDir="tmp"+(new Random().nextInt(1000000));
		String tmpFile=new Random().nextInt(1000000)+"";
		String realDir=this.getServlet().getServletContext().getRealPath(tmpDir);
		String realFile=this.getServlet().getServletContext().getRealPath(tmpDir+"/"+tmpFile);
		try {
			out=response.getWriter();
			File fileTmpDir=new File(realDir);
			out.println("创建临时文件夹<br/>");
			fileTmpDir.mkdirs();
			out.println("上传文件到临时文件夹<br/>");
			is=restoreFileForm.getFile().getInputStream();
			os=new FileOutputStream(realFile);
			byte[] buf=new byte[4096];
			int num=0;
			int count=0;
			while((num=is.read(buf))!=-1) {
				
				os.write(buf, 0, num);
				count+=num;
				if(count%(1024*1024)==0) {
					out.println("已上传："+count+"/"+restoreFileForm.getFile().getFileSize()+"<br/>");
				}
			}
			out.println("上传成功<br/>");
		}
		catch (IOException e) {
			e.printStackTrace();
			return null;
		} finally {
			try {
				if(os!=null) os.close();
				if(is!=null) is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		out.println("开始解压文件<br/>");
		UnzipUtils unzip=new UnzipUtils();
		unzip.setForce(true);
		unzip.setFromFilename(realFile);
		unzip.setSubDirname("");
		unzip.setToFilename(this.getServlet().getServletContext().getRealPath(""));
		try{
			unzip.unZip();
			out.println("解压成功<br/>");
		} catch(ZipException e) {
			out.println("压缩文件损坏<br/>");
		} catch(IOException e) {
			out.println("压缩文件操作失败<br/>");
		}
		out.println("删除临时文件和临时文件夹<br/>");
		File fileRealFile=new File(realFile);
		if(fileRealFile.delete()==true){
			out.println("删除临时文件成功<br/>");
		} else {
			out.println("删除临时文件失败<br/>");
		}
		File fileRealDir=new File(realDir);
		if(fileRealDir.delete()==true){
			out.println("删除临时文件夹成功<br/>");
		} else {
			out.println("删除临时文件夹失败<br/>");
		}
		out.close();
		return null;
	}
}