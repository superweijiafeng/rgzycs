/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.fjw.struts.action;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.fjw.domain.User;
import com.fjw.service.UserService;
import com.fjw.struts.form.LoginForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-13-2016
 * 
 * XDoclet definition:
 * @struts.action path="/login" name="loginForm" input="/WEB-INF/login.jsp" scope="request"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;
		
		if(request.getSession().getAttribute("user")!=null) {
			return mapping.findForward("goHome");
		}
		if(loginForm==null || loginForm.getUsername()==null || loginForm.getPassword()==null) {
			return mapping.findForward("login");
		}
		if(false==validate(loginForm,request,response)){
			return mapping.findForward("relogin");
		}
		
		
		User user=new User();
		user.setUsername(loginForm.getUsername());
		user.setPassword(loginForm.getPassword());
		if(UserService.checkPassword(user)==null) {
			request.setAttribute("errorPassword", "用户名/密码错误");
			return mapping.findForward("relogin");
		} else {
			request.getSession().setAttribute("user", user);
			request.getSession().setMaxInactiveInterval(3600*24); //session invalidate after a day
			
			//set cookie
			Cookie usernameCookie=new Cookie("username", loginForm.getUsername());
			Cookie passwordCookie=new Cookie("password", loginForm.getPassword());
			Cookie isKeepPassCookie=null;
			if(loginForm.getIsKeepPass()!=null) {
				isKeepPassCookie=new Cookie("isKeepPass","true");
				usernameCookie.setMaxAge(3600*24*30);//A month
				passwordCookie.setMaxAge(3600*24*30);
				isKeepPassCookie.setMaxAge(3600*24*30);
			} else {
				isKeepPassCookie=new Cookie("isKeepPass","false");
				usernameCookie.setMaxAge(0);
				passwordCookie.setMaxAge(0);
				isKeepPassCookie.setMaxAge(0);
			}
			response.addCookie(usernameCookie);
			response.addCookie(passwordCookie);
			response.addCookie(isKeepPassCookie);
			return mapping.findForward("home");
		}
	}

	private boolean validate(LoginForm loginForm,HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session=request.getSession();
		String sessionCheckCode=null;
		if((sessionCheckCode=(String) session.getAttribute("checkCode"))==null) {
			request.setAttribute("errorCheckCode", "验证码已过期，请点击刷新验证码");
		}
		if(loginForm.getCheckcode()==null || loginForm.getCheckcode().equals(sessionCheckCode)==false) {
			request.setAttribute("errorCheckCode", "验证码错误");
			return false;
		}
		if(loginForm.getUsername().length()==0) {
			request.setAttribute("errorUsername", "请输入用户名");
			return false;
		}
		if(loginForm.getPassword().length()==0) {
			request.setAttribute("errorPassword", "请输入密码");
			return false;
		}
		return true;
	}
}